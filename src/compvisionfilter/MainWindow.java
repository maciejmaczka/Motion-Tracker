/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package compvisionfilter;

import com.github.sarxos.webcam.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import javax.imageio.*;
import java.io.*;
import javax.swing.SwingUtilities;
import java.awt.image.BufferedImage;
import java.awt.Color.*;

/**
 *
 * @author mac
 */



public class MainWindow extends javax.swing.JFrame {

    
    Webcam webcam;
    Graphics2D area_wanila;
    Graphics2D area_grey;
    Graphics2D area_edge;
   
    Graphics2D area_sum;
    
    BufferedImage bi_source;
    BufferedImage bi_grey_1;
    BufferedImage bi_grey_2;
    
    BufferedImage bi_now;
    BufferedImage bi_previous;
    
    BufferedImage bi_motion;
    
    BufferedImage bi_track;
   

    trackpointer track = new trackpointer();

    @Override
    public void transferFocus() {
        super.transferFocus(); //To change body of generated methods, choose Tools | Templates.
    }
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        group_grey_scale = new javax.swing.ButtonGroup();
        group_source_edge = new javax.swing.ButtonGroup();
        button_start_camera = new javax.swing.JButton();
        panel_wanila = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        panel_motion = new javax.swing.JPanel();
        panel_grey = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        panel_sum = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        button_start_camera.setText("Start Camera");
        button_start_camera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_start_cameraActionPerformed(evt);
            }
        });

        panel_wanila.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panel_wanila.setPreferredSize(new java.awt.Dimension(320, 240));

        javax.swing.GroupLayout panel_wanilaLayout = new javax.swing.GroupLayout(panel_wanila);
        panel_wanila.setLayout(panel_wanilaLayout);
        panel_wanilaLayout.setHorizontalGroup(
            panel_wanilaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 314, Short.MAX_VALUE)
        );
        panel_wanilaLayout.setVerticalGroup(
            panel_wanilaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 234, Short.MAX_VALUE)
        );

        jLabel1.setText("Wanila");

        panel_motion.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panel_motion.setPreferredSize(new java.awt.Dimension(320, 240));

        javax.swing.GroupLayout panel_motionLayout = new javax.swing.GroupLayout(panel_motion);
        panel_motion.setLayout(panel_motionLayout);
        panel_motionLayout.setHorizontalGroup(
            panel_motionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 314, Short.MAX_VALUE)
        );
        panel_motionLayout.setVerticalGroup(
            panel_motionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 234, Short.MAX_VALUE)
        );

        panel_grey.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panel_grey.setPreferredSize(new java.awt.Dimension(320, 240));

        javax.swing.GroupLayout panel_greyLayout = new javax.swing.GroupLayout(panel_grey);
        panel_grey.setLayout(panel_greyLayout);
        panel_greyLayout.setHorizontalGroup(
            panel_greyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 314, Short.MAX_VALUE)
        );
        panel_greyLayout.setVerticalGroup(
            panel_greyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 234, Short.MAX_VALUE)
        );

        jLabel4.setText("Greyscale");

        panel_sum.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panel_sum.setPreferredSize(new java.awt.Dimension(320, 240));

        javax.swing.GroupLayout panel_sumLayout = new javax.swing.GroupLayout(panel_sum);
        panel_sum.setLayout(panel_sumLayout);
        panel_sumLayout.setHorizontalGroup(
            panel_sumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 314, Short.MAX_VALUE)
        );
        panel_sumLayout.setVerticalGroup(
            panel_sumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 234, Short.MAX_VALUE)
        );

        jLabel5.setText("Track");

        jLabel2.setText("Motion");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panel_motion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panel_sum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(jLabel1)
                        .addGap(316, 316, 316)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(button_start_camera))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(137, 137, 137)
                            .addComponent(jLabel2)
                            .addGap(305, 305, 305)
                            .addComponent(jLabel5))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(panel_wanila, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(panel_grey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(170, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(button_start_camera)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panel_wanila, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)))
                    .addComponent(panel_grey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel_motion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panel_sum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
        public void start_motion()
    {
        
              track.x = 160;
              track.y = 120;
              track.color = Integer.parseInt( "FF0000", 16);  ;
        
              Thread t1 = new Thread( new Runnable() 
              
              {

                  @Override
                  public void run() 
                  {
                      
                      
                      try
                      {
                      
                     while(true)
                     {
                         
                         

                                     
                                      Thread.sleep(25);
                                      bi_source = webcam.getImage();
                                      area_wanila.drawImage(bi_source, null, 0, 0);
                                      
                                      bi_previous = to_grey_scale(bi_source);
                                      Thread.sleep(25);
                                      
                                      
                                     bi_source = webcam.getImage();
                                      area_wanila.drawImage(bi_source, null, 0, 0);
                                      bi_now = to_grey_scale(bi_source);
                                 //     bi_grey_2 = to_grey_scale(bi_source);
                                    
                                   
                                 
                                     bi_motion = compare_in_time(bi_now  , bi_previous);
                                    
                                      track_object(bi_motion);
                                     
                                      //edge_sum(edge_veritical(to_grey_scale(webcam.getImage())) ,edge_horizontal(to_grey_scale(webcam.getImage())));
                                      
                       
                     }
                     
                      }
                      catch (Exception e)
                      {
                          
                         System.out.println("ERROR " + e.getMessage());
                          
                      }
                      
                     
                  }
              });
              t1.start();
              

              
        
        
    }
   
    private BufferedImage to_grey_scale(BufferedImage bi)
    {
        
      // BufferedImage tmp = bi.getSubimage(0,0,bi.getWidth(), bi.getHeight() );
      // bi = to_grey_scale(webcam.getImage());
        BufferedImage tmp = new BufferedImage(320, 240 , BufferedImage.TYPE_INT_RGB); 
       // int x = 0;
      //  int y = 0;
        
        Color color;
        
        int red;
        int green;
        int blue; 
        int rgb;
        
        for (int x = 0 ; x < 320 ; x++)
        {
            for (int y = 0 ; y < 240 ; y++)
            {
             
            
        
                color = new Color(bi.getRGB(x, y));

                red = color.getRed();
                green = color.getGreen();
                blue = color.getBlue();


             //   if (radio_average.isSelected())
                {
                    
                     red = green = blue = (int)   (     ( Math.max(red, Math.max(green, blue))) + Math.min(red, Math.min(green, blue))  )  /2 ;
                 //+ Math.min(red, Math.min(green, blue))) * 0,5     
                }                    
           //     if (radio_light.isSelected())
                {
                    
            //         red = green = blue = (int)((red  + green  + blue ) * 0.3333 );
                
                }                    
          //      if (radio_luminosity.isSelected())
                {
                    
               //      red = green = blue = (int)(red * 0.21 + green * 0.72 + blue * 0.07);
                
                }
                
                
                color = new Color(red, green, blue);

                rgb = color.getRGB();

                
                
                tmp.setRGB(x, y, rgb);
                
                
            }
        }
        
        
        area_grey.drawImage(tmp, null, 0, 0);
        
        return tmp;
        
    }
     
    
    
    public void search_nearest(trackpointer track)
    {
        
        
        
        
    }

    
    
    private BufferedImage track_object(BufferedImage motion)
    {
        BufferedImage tmp = new BufferedImage(320, 240 , BufferedImage.TYPE_INT_RGB); 
        
        
        for (int x = 0 ; x < 320 ; x++)
        {
            for (int y = 0 ; y < 240 ; y++)
            {
               tmp.setRGB(x, y, motion.getRGB(x, y));
                
            }   
        }
        
        
        try
        {
        
            
        tmp.setRGB(track.x, track.y,  track.color);
        for ( int x = -5 ; x < 5 ; x ++)
        {
            
            for ( int y = -5 ; y < 5 ; y++)
            {
                
                tmp.setRGB(track.x + x,  track.y + y,  track.color );
                
                
            }
            
            
        }
        }
        catch (Exception e)
        {
            
            
        }
        

        
        
        int points = 0;
     
        int x_move = 0;
        int y_move = 0;
        
        for (int x = 0 ; x < 320 ; x++)
        {
            for (int y = 0 ; y < 240 ; y++)
            {
                
                int argb = motion.getRGB(x, y); 
                
                int r = (argb>>16)&0xFF;
                int g = (argb>>8)&0xFF;
                int b = (argb>>0)&0xFF;
                
                if  (( r > 50 ) && ( g > 50) && (b > 50))
                {
                       points++;
                     //  if (x >= track.x)
                       {
                          x_move += x ;
                          y_move += y;
                       }
                       

                            
                }
                
   
                
            }
        }
        

        
             if (points != 0)
                {
                track.x =  (int) (x_move/points);
                track.y =  (int) (y_move/points);
                }
        
        area_sum.drawImage(tmp, null, 0, 0); 
        
        return tmp;
    }
    
    
    
    private BufferedImage compare_in_time(BufferedImage now , BufferedImage prev)
    {
        BufferedImage tmp = new BufferedImage(320, 240 , BufferedImage.TYPE_INT_RGB); 
        
      
        
        
        int rgb_diff;
        int rgb_now;
        int rgb_prev;
        
         for (int x = 0 ; x < 320 ; x++)
        {
            for (int y = 0 ; y < 240 ; y++)
            {
                
                // porownywanie pikseli
         
               rgb_now = now.getRGB(x, y);
               rgb_prev = prev.getRGB(x, y);
                
               rgb_diff = Math.abs(rgb_now - rgb_prev);
               
               tmp.setRGB(x, y, rgb_diff + 50);
              
           //    bi_last_motion.setRGB(x, y, rgb_diff + 50);

                
            }
        
           
        }
         
         

            // still in moved
                       
        area_edge.drawImage(tmp, null, 0, 0); 
       
       

        
        
        return tmp;
    }
    

    private void start_camera()
    {
        
         try 
        {
            
            Dimension dim = new Dimension(320, 240);
            
            webcam = Webcam.getDefault();
            
            webcam.setViewSize(dim);
            webcam.open();

            area_wanila = (Graphics2D) panel_wanila.getGraphics();
            area_grey = (Graphics2D) panel_grey.getGraphics();
            area_edge =  (Graphics2D) panel_motion.getGraphics();
            
            area_sum =  (Graphics2D) panel_sum.getGraphics();
            
        }
        catch (Exception e)
        {
            
            
            System.out.println("ERROR Start" + e.getMessage());
            
        } 
        
    }
    
    private void button_start_cameraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_start_cameraActionPerformed
  
        
            start_camera();
            start_motion();
        
        
             
    }//GEN-LAST:event_button_start_cameraActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_start_camera;
    private javax.swing.ButtonGroup group_grey_scale;
    private javax.swing.ButtonGroup group_source_edge;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel panel_grey;
    private javax.swing.JPanel panel_motion;
    private javax.swing.JPanel panel_sum;
    private javax.swing.JPanel panel_wanila;
    // End of variables declaration//GEN-END:variables
}
